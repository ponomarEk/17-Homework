{"version":3,"sources":["logo.svg","Components/Timer/timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","state","time","props","minutes","Math","floor","seconds","active","width","step","startTimer","setState","onTimeStart","stopTimer","onTimePause","isAutostart","autostart","changeTime","a","procent","this","timer","setInterval","onTick","onTimeEnd","clearInterval","widthTimer","toFixed","onClick","style","className","Component","App","useState","console","log","timeLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,4JCoF5BC,G,kNAjFXC,MAAM,CACFC,KAAK,EAAKC,MAAMD,KAChBE,QAAQC,KAAKC,MAAM,EAAKH,MAAMD,KAAK,KACnCK,QAAQF,KAAKC,MAAO,EAAKH,MAAMD,KAAK,IAAO,KAC3CM,QAAO,EACPC,MAAM,IACNC,KAAK,EAAKP,MAAMO,M,EAGpBC,WAAW,WACP,EAAKC,SAAS,CACVJ,QAAO,IAEX,EAAKL,MAAMU,YAAY,EAAKZ,Q,EAEhCa,UAAU,WACN,EAAKF,SAAS,CACVJ,QAAO,IAEX,EAAKL,MAAMY,e,EAEfC,YAAY,WACL,EAAKb,MAAMc,WACX,EAAKN,c,EAGVO,W,sBAAW,sBAAAC,EAAA,2DACJ,EAAKlB,MAAMC,MAAM,KADb,gCAEG,EAAKU,SAAS,CACjBV,KAAK,EAAKD,MAAMC,KAAK,MAHrB,2C,kEAOO,IAAD,OACTkB,EAAWC,KAAKpB,MAAMS,KAAK,KAAOW,KAAKpB,MAAMQ,OAAOY,KAAKlB,MAAMD,KAAK,MAC1EmB,KAAKL,cACLK,KAAKC,MAAQC,aACT,WAEG,EAAKtB,MAAMO,SAAS,EAAKP,MAAMG,QAAQ,GAAG,EAAKH,MAAMM,QAAQ,IAC5D,EAAKJ,MAAMqB,OAAQ,EAAKvB,MAAMC,KAAM,KACpC,EAAKgB,aACL,EAAKN,SAAS,CACVR,QAAQC,KAAKC,MAAM,EAAKL,MAAMC,KAAK,KACnCK,QAAQF,KAAKC,MAAO,EAAKL,MAAMC,KAAK,IAAO,QAGrB,IAArB,EAAKD,MAAMG,SAAkC,IAArB,EAAKH,MAAMM,UACxC,EAAKJ,MAAMsB,YAEXC,cAAc,EAAKJ,UAG3B,KACAD,KAAKM,WAAaJ,aAAY,WACvB,EAAKtB,MAAMO,SAAS,EAAKP,MAAMG,QAAQ,GAAG,EAAKH,MAAMM,QAAQ,IAC5D,EAAKK,SAAS,CACXH,MAAM,EAAKR,MAAMQ,MAAMW,EAAQQ,QAAQ,OAGhDP,KAAKpB,MAAMS,Q,+BAGT,OACQ,6BACI,4BAAQmB,QAASR,KAAKV,WAAYa,OAAQH,KAAKlB,MAAMqB,QAArD,SAGA,4BAAQK,QAASR,KAAKP,WAAtB,QAGA,2BACKO,KAAKpB,MAAMG,QAAQ,oCAAWiB,KAAKpB,MAAMM,QAAQ,yCAEtD,yBAAKuB,MAAO,CAAGrB,MAAOY,KAAKpB,MAAMQ,MAAM,KAAMsB,UAAU,a,GA3E3DC,c,YCqBLC,MAlBf,WAAiB,IAAD,EAEFC,mBAAS,KAAfhC,EAFQ,sBAGGgC,oBAAS,GAApBjB,EAHQ,sBAIFiB,mBAAS,KAAfxB,EAJQ,oBAKZ,OACE,yBAAKqB,UAAU,OACb,kBAAC,EAAD,CAAO7B,KAAMA,EACbe,UAAWA,EACXO,OAAQ,SAACtB,GAAD,OAAUiC,QAAQC,IAAI,gGAAuBlC,EAAK,2CAC1DQ,KAAMA,EACNe,UAAW,kBAAMU,QAAQC,IAAI,mEAC7BvB,YAAa,SAACwB,GAAD,OAAcF,QAAQC,IAAI,qFACvCrB,YAAa,SAACsB,GAAD,OAAcF,QAAQC,IAAI,0FCN3BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.0234148e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{ useState,useEffect, Component } from'react';\r\nimport './timer.css'\r\nclass Timer extends Component{\r\n    state={\r\n        time:this.props.time,\r\n        minutes:Math.floor(this.props.time/60000),\r\n        seconds:Math.floor((this.props.time%60000)/1000),\r\n        active:false,\r\n        width:100,\r\n        step:this.props.step\r\n    }\r\n    \r\n    startTimer=()=>{\r\n        this.setState({\r\n            active:true\r\n        });\r\n        this.props.onTimeStart(this.state)\r\n      }\r\n    stopTimer=()=>{\r\n        this.setState({\r\n            active:false\r\n        });\r\n        this.props.onTimePause();\r\n      }\r\n    isAutostart=()=>{\r\n        if(this.props.autostart){\r\n           this.startTimer();\r\n        }\r\n      }\r\n      changeTime=async()=>{\r\n          if(this.state.time>=1000){\r\n              await this.setState({\r\n                 time:this.state.time-1000\r\n               })\r\n          }\r\n      }\r\n    componentDidMount(){\r\n        const procent = (this.state.step/1000)*(this.state.width/(this.props.time/1000))\r\n        this.isAutostart()\r\n        this.timer = setInterval(\r\n            ()=>\r\n            {\r\n            if(this.state.active&&(this.state.minutes>0||this.state.seconds>0)){\r\n                this.props.onTick((this.state.time)/1000);\r\n                this.changeTime();\r\n                this.setState({          \r\n                    minutes:Math.floor(this.state.time/60000),\r\n                    seconds:Math.floor((this.state.time%60000)/1000),\r\n                })\r\n            }\r\n            else if((this.state.minutes===0&&this.state.seconds===0)){\r\n                this.props.onTimeEnd();\r\n                \r\n                clearInterval(this.timer)\r\n            }\r\n        },\r\n        1000)\r\n        this.widthTimer = setInterval(()=> {\r\n            if(this.state.active&&(this.state.minutes>0||this.state.seconds>0)){\r\n                this.setState({          \r\n                   width:this.state.width-procent.toFixed(4)\r\n                })\r\n            }\r\n        },this.state.step)\r\n    }\r\n        render(){\r\n            return(\r\n                    <div>\r\n                        <button onClick={this.startTimer} onTick={this.props.onTick}>\r\n                            Start\r\n                        </button>\r\n                        <button onClick={this.stopTimer}>\r\n                            Stop\r\n                        </button>\r\n                        <p>\r\n                            {this.state.minutes+' минут  '+this.state.seconds+\" секунд\"}\r\n                        </p>\r\n                        <div style={{  width: this.state.width+\"%\"}} className=\"row\"></div>\r\n                        \r\n                    </div>\r\n\r\n                )\r\n        }\r\n}\r\nexport default Timer;","import React, { Component, useState } from 'react';\nimport Timer from './Components/Timer/timer';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App () {\n\n  const[time]=useState(60000);\n  const[autostart]=useState(true);\n  const[step]=useState(2000);\n    return (\n      <div className=\"App\">\n        <Timer time={time} \n        autostart={autostart} \n        onTick={(time) => console.log(\"Осталось времени: \" + time+\" секунд!\")}\n        step={step} \n        onTimeEnd={() => console.log(\"Время вышло!\")} \n        onTimeStart={(timeLeft) => console.log(\"Таймер запущен!\")}\n        onTimePause={(timeLeft) => console.log(\"Таймер на паузе!\")}/>\n      </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}